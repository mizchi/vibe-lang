# Test utilities library
# Simple test examples to verify test discovery

let double x = x * 2

test "double function" (fn x -> assert (double 5 == 10) "double 5 should be 10")

let triple x = x * 3

test "triple function" (fn x -> assert (triple 3 == 9) "triple 3 should be 9")

# Recursive factorial function
rec factorial n =
  if n <= 0 {
    1
  } else {
    n * factorial (n - 1)
  }

test "factorial base case" (fn x -> assert (factorial 0 == 1) "factorial 0 should be 1")

test "factorial recursive case" (fn x -> assert (factorial 5 == 120) "factorial 5 should be 120")

# Export functions for use by other modules
export double, triple, factorial