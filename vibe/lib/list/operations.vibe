# List operations
# Standard list manipulation functions

# Basic list operations are built into the runtime
# These provide convenience functions on top

# Map function - apply a function to each element
let map f lst = 
  match lst {
    [] -> []
    h :: t -> (f h) :: (map f t)
  }

# Filter function - keep only elements that satisfy predicate
let filter pred lst =
  match lst {
    [] -> []
    h :: t -> 
      if pred h {
        h :: (filter pred t)
      } else {
        filter pred t
      }
  }

# Fold left - reduce list from left to right
let foldLeft f acc lst =
  match lst {
    [] -> acc
    h :: t -> foldLeft f (f acc h) t
  }

# Fold right - reduce list from right to left  
let foldRight f lst acc =
  match lst {
    [] -> acc
    h :: t -> f h (foldRight f t acc)
  }

# Length of a list
let length lst = foldLeft (fn acc _ -> acc + 1) 0 lst

# Append two lists
let append lst1 lst2 =
  match lst1 {
    [] -> lst2
    h :: t -> h :: (append t lst2)
  }

# Reverse a list
let reverse lst = foldLeft (fn acc x -> x :: acc) [] lst

# Take first n elements
rec take n lst =
  if n <= 0 {
    []
  } else {
    match lst {
      [] -> []
      h :: t -> h :: (take (n - 1) t)
    }
  }

# Drop first n elements
rec drop n lst =
  if n <= 0 {
    lst
  } else {
    match lst {
      [] -> []
      _ :: t -> drop (n - 1) t
    }
  }

# Export all functions
export map, filter, foldLeft, foldRight, length, append, reverse, take, drop