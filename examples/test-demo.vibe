# In-source test demo for Vibe Language

# Simple arithmetic functions for testing
let add x y = x + y
let multiply x y = x * y
let factorial n =
  if n == 0 {
    1
  } else {
    n * (factorial (n - 1))
  }

# Test arithmetic operations
test "add function works correctly" (fn () ->
  assert (add 2 3 == 5) "2 + 3 should equal 5"
)

test "multiply function works correctly" (fn () ->
  assert (multiply 3 4 == 12) "3 * 4 should equal 12"
)

test "factorial of 5" (fn () ->
  let result = factorial 5
  let expected = 120
  assert (result == expected) "factorial(5) should be 120"
)

# Test with inspect
test "inspect shows intermediate values" (fn () ->
  let x = inspect 42 "initial value"
  let y = inspect (x * 2) "doubled value"
  assert (y == 84) "inspected value should be 84"
)

# Test failure case (commented out to not fail the whole suite)
# test "this test should fail" (fn () ->
#   assert false "This assertion always fails"
# )

# String operations
let strConcat s1 s2 = s1 ++ s2

test "string concatenation" (fn () ->
  let result = strConcat "Hello, " "World!"
  assert (result == "Hello, World!") "String concatenation failed"
)

# List operations
let listLength lst =
  match lst {
    [] -> 0
    _ :: tail -> 1 + (listLength tail)
  }

test "list length calculation" (fn () ->
  let empty = listLength []
  assert (empty == 0) "Empty list should have length 0"
  
  let three = listLength [1, 2, 3]
  assert (three == 3) "List [1,2,3] should have length 3"
)

# Pattern matching test
let isEven n = 
  match n % 2 {
    0 -> true
    _ -> false
  }

test "even number detection" (fn () ->
  assert (isEven 4) "4 should be even"
  assert (not (isEven 5)) "5 should not be even"
)

# Option type handling
let safeDiv x y =
  if y == 0 {
    None
  } else {
    Some (x / y)
  }

test "safe division" (fn () ->
  match safeDiv 10 2 {
    Some result -> assert (result == 5) "10 / 2 should be 5"
    None -> assert false "Division by 2 should not fail"
  }
  
  match safeDiv 10 0 {
    Some _ -> assert false "Division by 0 should fail"
    None -> assert true "Division by 0 correctly returned None"
  }
)

# Main entry point (optional)
let main = fn ->
  print "This file contains in-source tests. Run with: vsh test test-demo.vibe"