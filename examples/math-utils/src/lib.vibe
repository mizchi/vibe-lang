# Math utilities library
export { factorial, fibonacci, isPrime, gcd }

# Factorial function
rec factorial n =
  if (eq n 0) {
    1
  } else {
    n * (factorial (n - 1))
  }

# Fibonacci function
rec fibonacci n =
  if n < 2 {
    n
  } else {
    (fibonacci (n - 1)) + (fibonacci (n - 2))
  }

# Check if a number is prime
let isPrime = fn n: Int -> Bool = {
  if n < 2 {
    false
  } else {
    let checkDivisible = rec check i =
      if i * i > n {
        true
      } else {
        if (eq (n % i) 0) {
          false
        } else {
          check (i + 1)
        }
      }
    in checkDivisible 2
  }
}

# Greatest common divisor
rec gcd a b =
  if (eq b 0) {
    a
  } else {
    gcd b (a % b)
  }
