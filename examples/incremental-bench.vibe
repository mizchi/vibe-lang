# Incremental compilation benchmark test file
# This file contains multiple definitions with dependencies

# Base values
let base1 = 10
let base2 = 20
let base3 = 30

# First level dependencies
let sum1 = base1 + base2
let sum2 = base2 + base3
let sum3 = base1 + base3

# Second level dependencies
let total = sum1 + sum2 + sum3
let average = total / 3

# Complex function with dependencies
let processData x y z = 
  let a = x + base1 in
  let b = y + base2 in
  let c = z + base3 in
    (a + b + c) * average

# Recursive function
rec factorial n =
  if n <= 1 {
    1
  } else {
    n * (factorial (n - 1))
  }

# Function using other functions
let compute n =
  let fact = factorial n in
  let proc = processData fact fact fact in
    proc + total

# List operations
let numbers = [1, 2, 3, 4, 5]

# Higher-order function
rec map f lst =
  match lst {
    [] -> []
    h :: t -> cons (f h) (map f t)
  }

# Length function
rec length lst =
  match lst {
    [] -> 0
    _ :: t -> 1 + (length t)
  }

# Use the map function
let doubled = map (fn x -> x * 2) numbers

# Complex nested function
let complexComputation x y =
  let helper a b =
    let inner c = c + a + b in
      inner (a * b)
  in
    (helper x y) + (helper y x)

# More dependencies
let result1 = compute 5
let result2 = complexComputation 10 20
let finalResult = result1 + result2

# Test functions to create more dependencies
let test1 = fn () -> base1 + base2 + base3
let test2 = fn () -> sum1 * sum2 * sum3
let test3 = fn () -> factorial 10
let test4 = fn () -> map (fn x -> x * x) doubled

# Final computation that depends on many things
let ultimateResult = 
  (test1 ()) + (test2 ()) + (test3 ()) + (length (test4 ()))